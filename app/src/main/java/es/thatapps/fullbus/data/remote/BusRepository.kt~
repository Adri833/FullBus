package es.thatapps.fullbus.data.remote

import com.google.firebase.firestore.FirebaseFirestore
import com.google.firebase.firestore.toObject
import es.thatapps.fullbus.presentation.busDetails.domain.BusDetailDomain
import es.thatapps.fullbus.presentation.busDetails.domain.BusSchedule
import kotlinx.coroutines.tasks.await
import javax.inject.Inject

class BusRepository @Inject constructor() {
    private val firestore = FirebaseFirestore.getInstance()
    private val busCollection = firestore.collection("autobuses")
    private val busScheduleCollection = firestore.collection("schedules")

    // Metodo que obtiene todos los autobuses activos
    suspend fun getActiveBuses(): List<BusDetailDomain> {
        val snapshot = busCollection.get().await()
        return snapshot.documents.mapNotNull { it.toObject<BusDetailDomain>() }
    }

    // Metodo que obtiene los horarios de buses
    suspend fun getBusSchedules(): List<BusSchedule> {
        val snapshot = busScheduleCollection.get().await()
        return snapshot.documents.mapNotNull { it.toObject<BusSchedule>() }
    }

    // Metodo que agrega un bus a la db
    suspend fun addBus(bus: BusDetailDomain) {
        // Usamos la combinación de la línea y la hora de salida como ID único
        val busId = "${bus.line}_${bus.departureTime}"

        val autobus = hashMapOf(
            "line" to bus.line,
            "isFull" to bus.isFull,
            "departureTime" to bus.departureTime,
            "arriveTime" to bus.arriveTime
        )

        busCollection.document(busId).set(autobus).await()
    }

    // Metodo para eliminar un bus de la db
    suspend fun deleteBus(bus: BusDetailDomain) {
        val busId = "${bus.line}_${bus.departureTime}"

        // Elimina el bus usando su ID único
        busCollection.document(busId).delete().await()
    }

    // Actualiza el horario de los autobuses en Firestore
    suspend fun updateBusSchedules() {
        val db = FirebaseFirestore.getInstance()

        // Referencia al documento donde están los horarios de los autobuses
        val scheduleDocRef = db.collection("schedules").document("M-126") // Reemplaza con el ID del documento

        // Los horarios corregidos, asegúrate de que estén en formato lista de cadenas
        val saturdayScheduleCorrected = listOf(
            "06:45", "07:45", "09:45", "12:00", "13:30", "14:00", "16:00", "18:00", "20:00", "22:15"
        )

        // Prepara los datos actualizados
        val updatedData = mapOf(
            "normalSchedule" to saturdayScheduleCorrected
        )

        // Actualiza los datos en Firestore
        try {
            scheduleDocRef.update(updatedData).await()
            println("Horario actualizado correctamente")
        } catch (e: Exception) {
            println("Error al actualizar los horarios: ${e.message}")
        }
    }

    // Metodo que actualiza un bus en la db
    suspend fun updateBus(bus: BusDetailDomain) {
        val busDoc = busCollection
            .whereEqualTo("line", bus.line) // 'line' es el identificador unico del autobus (filtro)
            .get()
            .await()
            .documents
            .firstOrNull()

        // Actualiza el autobus con los datos nuevos
        busDoc?.let {
            busCollection.document(it.id).set(bus).await()
        }
    }
}